{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"C++ Template": {
		"prefix": "boiler",
		"body": [
			"#include <bits/stdc++.h>",
			"#define nl (cout << endl)",
			"using namespace std;",
			"$1",
			"int main()",
			"{",
			"    $2", // Placeholder for the user to add content.
			"    return 0;",
			"}"
		],
		"description": "Template for a basic C++ program with standard libraries."
	},
	"Cpp Getter": {
		"prefix": "getter",
		"body": [
			"${1:int} get${2:Value}() const",
			"{",
			"    return ${3:variable};",
			"}"
		],
		"description": "Print a default getter"
	},
	"Cpp Setter": {
		"prefix": "setter",
		"body": [
			"void set${1:Value}(${2:int} ${3:variable})",
			"{",
			"    this->${3} = ${3};",
			"}"
		],
		"description": "Print a default setter"
	},
	"Cpp CP": {
		"prefix": "cp",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"#define int long long",
			"#define nl cout<<endl;",
			"#define vi vector<int>",
			"#define vii vector<vector<int>>",
			"#define f(i,s,e) for(int i=s;i<e;i++) ",
			"#define sa(vec) sort(vec.begin(), vec.end()) ",
			"#define sd(vec) sort(vec.begin(), vec.end(), [](int a, int b){return a>b;})",
			"#define printv(vec) for(auto &value: vec) cout<<value<<endl;",
			"#define inputv(vec) for(auto &value: vec)   cin>>value;",
			"#define all(s) s.begin(), s.end()",
			"#define fastnuces ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);int t = 1;",
			"",
			"void solve(){",
			"    $2",
			"}",
			"signed main() {",
			" fastnuces;",
			" cin >> t;$1",
			" while (t--) {",
			" solve();",
			" }",
			" return 0;",
			"}"
		],
		"description": "Boilerplate code for C++ in VS Code"
	}
}	

template <typename T>
T* reallocate(T* arr, size_t oldSize, size_t newSize) {
    T* temp = new T[newSize];  // Allocate new memory
    std::copy(arr, arr + std::min(oldSize, newSize), temp);  // Copy elements
    delete[] arr;  // Free old memory
    return temp;  // Return new pointer
}
