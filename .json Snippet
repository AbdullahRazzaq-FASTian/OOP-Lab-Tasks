{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"C++ Template": {
		"prefix": "boiler",
		"body": [
			"#include <bits/stdc++.h>",
			"#define nl (cout << endl)",
			"using namespace std;",
			"$1",
			"int main()",
			"{",
			"    $2", // Placeholder for the user to add content.
			"    return 0;",
			"}"
		],
		"description": "Template for a basic C++ program with standard libraries."
	},
	"Cpp Getter": {
		"prefix": "getter",
		"body": [
			"${1:int} get_${2:Variable}() const",
			"{",
			"    return ${2:variable};",
			"}"
		],
		"description": "Print a default getter"
	},
	"Cpp Setter": {
		"prefix": "setter",
		"body": [
			"void set_${2:Variable}(${1:int} ${2:variable})",
			"{",
			"    this->${2} = ${2};",
			"}"
		],
		"description": "Print a default setter"
	},
	"FileHandler Class with Templates": {
		"prefix": "filehandler",
		"body": [
			"class FileHandler",
			"{",
			"public:",
			"    template <typename T>",
			"    void writeObject(const char *filename, T &obj)",
			"    {",
			"        ofstream file(filename, ios::binary | ios::app);",
			"        if (file.is_open())",
			"        {",
			"            file.write((char *)&obj, sizeof(T));",
			"            file.close();",
			"        }",
			"    }",
			"",
			"    template <typename T>",
			"    void readObject(const char *filename, T &tempObj)",
			"    {",
			"        ifstream file(filename, ios::binary);",
			"        if (file.is_open())",
			"        {",
			"            while (file.read((char *)&tempObj, sizeof(T)))",
			"            {",
			"                tempObj.display();",
			"            }",
			"            file.close();",
			"        }",
			"    }",
			"",
			"    template <typename T>",
			"    void readSpecificObject(const char *filename, T &obj, int index)",
			"    {",
			"        ifstream file(filename, ios::binary);",
			"        if (file.is_open())",
			"        {",
			"            file.seekg(index * sizeof(T), ios::beg);",
			"            file.read(reinterpret_cast<char *>(&obj), sizeof(T));",
			"            file.close();",
			"        }",
			"    }",
			"",
			"    template <typename T>",
			"    void updateSpecificObject(const char *filename, T &newObj, int index)",
			"    {",
			"        fstream file(filename, ios::binary | ios::in | ios::out);",
			"        if (file.is_open())",
			"        {",
			"            file.seekp(index * sizeof(T), ios::beg);",
			"            file.write(reinterpret_cast<char *>(&newObj), sizeof(T));",
			"            file.close();",
			"        }",
			"    }",
			"",
			"    template <typename T>",
			"    bool deleteSpecificObject(const char *filename, int index)",
			"    {",
			"        T blankObj;",
			"        updateSpecificObject(filename, blankObj, index);",
			"        return true;",
			"    }",
			"",
			"    template <typename T>",
			"    int countRecords(const char *filename)",
			"    {",
			"        ifstream file(filename, ios::binary | ios::ate);",
			"        if (file.is_open())",
			"        {",
			"            int size = file.tellg();",
			"            file.close();",
			"            return size / sizeof(T);",
			"        }",
			"        return 0;",
			"    }",
			"};"
		],
		"description": "Reusable FileHandler class for binary object operations"
	},
	"Cpp CP": {
		"prefix": "cp",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"#define nl cout<<endl;",
			"#define YN(condition) cout<<(condition?\"YES\":\"NO\")",
			"",
			"#define int long long",
			"#define ll long long",
			"#define ld long double",
			"#define pii pair<int,int>",
			"",
			"#define vi vector<int>",
			"#define vc vector<char>",
			"#define vs vector<string>",
			"#define vpi vector<pair<int,int>>",
			"#define vvi vector<vector<int>>",
			"#define mp map<int,int>",
			"#define uset unordered_set<int>",
			"#define ump unordered_map<int,int>",
			"#define pq priority_queue<int>",
			"#define pqm priority_queue<int, vector<int>, greater<int>>",
			"",
			"#define f(i,s,e) for(int i=s;i<e;i++)",
			"#define fn(i,s,e) for(int i=s;i>=e;i++)",
			"#define printv(vec) for(auto &value: vec) cout<<value<<endl;",
			"#define inputv(vec) for(auto &value: vec) cin>>value;",
			"",
			"#define pb push_back",
			"#define pp pop_back",
			"#define eb emplace_back",
			"#define all(s) s.begin(), s.end()",
			"#define sa(vec) sort(vec.begin(), vec.end())",
			"#define sd(vec) sort(vec.begin(), vec.end(), [](int a, int b){return a>b;})",
			"#define lambdaPair [](pair<int,int> a, pair<int,int> b)",
			"",
			"#define ones(n) __builtin_popcountll(int n);",
			"#define isOn(S, j) (S & (1<<j))",
			"#define setBit(S, j) S |= (1<<j)",
			"#define clearBit(S, j) S &= ~(1<<j)",
			"#define toggleBit(S, j) S ^= (1<<j)",
			"#define lowBit(S) (S & (-S))",
			"#define setAll(S, n) (S = (1<<n)-1)",
			"#define modulo(S, N) ((S) & (N-1))",
			"#define isPowerOfTwo(S) (!(S & (S-1)))",
			"#define nearestPowerOfTwoLess(S) (1<<(int)log2(S))",
			"#define nearestPowerOfTwoMore(S) (1<<((int)log2(S) + 1))",
			"#define turnOffLastBit(S) ((S) &= (S-1))",
			"#define turnOnLastZero(S) ((S) |= (S+1))",
			"#define turnOffLastConsecutiveBits(S) ((S) &= (S+1))",
			"#define turnOnLastConsecutiveZeroes(S) ((S) |= (S-1))",
			"",
			"ll gcd(ll a, ll b) { return __gcd(a, b); }",
			"ll lcm(ll a, ll b) { return a / gcd(a, b) * b; }",
			"string to_upper(string a) { for (int i = 0; i < (int)a.size(); ++i) if (a[i] >= 'a' && a[i] <= 'z') a[i] -= 'a' - 'A'; return a; }",
			"string to_lower(string a) { for (int i = 0; i < (int)a.size(); ++i) if (a[i] >= 'A' && a[i] <= 'Z') a[i] += 'a' - 'A'; return a; }",
			"bool prime(ll a) { if (a == 1) return 0; for (int i = 2; i <= round(sqrt(a)); ++i) if (a % i == 0) return 0; return 1; }",
			"ll modexp(ll a, ll b, ll m) { ll res = 1; a %= m; while (b > 0) { if (b & 1) res = (res * a) % m; a = (a * a) % m; b >>= 1; } return res; }",
			"#define fastnuces ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);int t = 1;",
			"void solve(){",
			"    $2",
			"}",
			"signed main() {",
			"    fastnuces;",
			"    cin >> t;$1",
			"    while (t--) {",
			"        solve();",
			"    }",
			"    return 0;",
			"}"
		],
		"description": "Boilerplate code for C++ in VS Code with extended utilities"
	}
}
// template <typename T>
// T* reallocate(T* arr, size_t oldSize, size_t newSize) {
//     T* temp = new T[newSize];  // Allocate new memory
//     std::copy(arr, arr + std::min(oldSize, newSize), temp);  // Copy elements
//     delete[] arr;  // Free old memory
//     return temp;  // Return new pointer
// }
